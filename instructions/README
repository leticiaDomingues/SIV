
    Exempli Gratia (POSIX by example)

    Copyright (c) 2015 Francisco Jose Monaco <monaco@icmc.usp.br>
    This is Free Open Source Software. For licensing, see COPYING
    POSIX-eg repository can be found at https://gitlab.com/monaco/posixeg


INTRODUCTION
------------

If you intend to do the proposed programming exercuse and use the automate
testing tools to assess your solutions, you should follow the specifications
of each  problem carefully.  Unless, otherwise indicated, the following general
rules apply.  Be aware of projct-specific requirements that, however, may
superpose these general rules.

Unless otherwise specified, it is assumed that your project will be released
under an open source distribution license.  This will make your project
available for other students to explore, contributing to the free open
source community in return for all the quality free resources you have
access to.  Moreover, in order to link against POSIXeg library, if your
project needs so, being covered by a GNU GPL compatible license is a
requirement.

PROJECT STRUCTURE
-----------------

These directions assumes your project named 'myproject' is hosted under a Git
repository system. The instructor may have either provided you the link to
your repository or asked you to create one.

In any case, your project's directory tree should be like this

   myrproject
     |_README             
     |_AUTHORS            
     |_COPYING
     |_INSTALL
     |_...

File README should be a text file containing essential information about
your project. While there is no strict rule for README, a reasonable
introduction should mention the project's name, purposes, authors and licensing
information. It helps to have basic instructions for installation and execution.
To that end, you may refer to the files AUTHORS, COPYING and INSTALL. Moreover,
being your project an open source software, you are required to inform where
the project can be obtained from. For instance, a minimal note might be

   "Myproject is (...)
    For copyright and licensing information see files AUTHORS and COPYING.
    Myporoject's source code may be obtained from (URL).
    Installation and execution are covered in file INSTALL."

You should list the software authors on the file AUTHORS. Please, provide
full names and e-mails.

Unless otherwise specified, it is requested that your project be licensed
under the terms of the GNU General Public License vr3.  In this case, file
COPYING should be a copy of the license terms. You may find the text of
GNU GPL vr in http://www.gnu.org/licenses/gpl.txt.  For conveniece, this
file can be also found in posixeg/tools/gpl.txt.

You must provide a file INSTALL with directions to build, install and use your
software. If you comply with conventional standards and do not need too specific
instructions, a simple annotation may be enough. For instance, a minimal
installation note might be

   "To build the software run make. 
    To install the software, run make install. 
    Set the user variable PREFIX to overwrite default installation path.

Note: if the exercise requires you to use autotools, the file INSTALL will be
automatically generated for you, and therefore you need not to worry about
writing it yourself.

Each exercised will require you to create a module under your project, which
should be contained in a subdirectory of top-level source directory named 
after POSIXeg's corresponding directory. For  instance, the hypothetical 
exercises posixeg/exercise/foo and posixeg/exercises/bar will require you 
to create the subdirectories foo and bar under your project's top source
directory:

   myproject
     |_README             
     |_AUTHORS            
     |_COPYING
     |_INSTALL
     |_foo
     |_bar


RELEASE POLICY
--------------

This exercise roadmap assumes your project 'myprioject' is hosted under a 
Git repository.  All deliveries for evaluation are expected in form of
releases published in the repository.  A release is an annotated tag
identified by a release code and a release number as in

  <release_code>-<release_number>

The release code indentify which module is being released, and the release
number identify which partial delivery it refers to.  Unless otherwise
specified, the release code is the module's directory name and release number
is a sequential three-digit number.  For instance, the first and second partial
releases of exercise/foo should be, respectively

  foo-001
  foo-002

Note: optional the exercise may specify a pre-release 000.

In order to make a release, you shall use the standard git tag commands and
push the tag into the main repository:

 $ git tag -a foo-001
 $ git push origin foo-001

Please, refer to git documentation for further instructions.

Unless otherwise specified, your delivered code should be in the master branch.

BUILD SYSTEM
------------

Each module under your project should contain a Makefile script which the user 
may use for building and installing your software. If you provide a custom
Makefile, it must implement at least the following rules:

   make	     		build the sofware
   make install		install the software 
   make uninstall	uninstall what 'install' rule has installed

It is not required but it will be much appreciated if you also implement

   make dist		pack source for distribution
   make distcheck	verify whether the distributed source can be correctly
   			built (i.e. it has all the needed files)

Your rules should honor the user variable PREFIX, which may be either defined
as an enviroment variable or passed through make command line. For example 

   $ cd myproject/foo
   $ make PREFIX=/tmp/foo
   $ make PREFIX=/tmp/foo install

should install 

   * executables under		$(PREFIX)/bin
   * libraries under    	$(PREFIX)/lib
   * headers under              $(PREFIX)/include/myproject
   * fixed data under           $(PREFIX)/share/myproject
   * documentation under        $(PREFIX)/share/doc/myproject

If PREFIX is not set, it should default to /usr/local.

This is particularly important because the review of your exercise may use
automated test tools that will look for your files in specific places. If
they are not found as where they are expected to be found, the tests may
fail.  For instance, some tests requires linking POSIXeg's test programs 
against your project's libraries. The test cases will search for your 
library in $(PREFIX)/lib and in $(PREFIX)/include.  If they are not there, 
the test will fail.

    Autotools
    ---------

While you may create your own Makefile, the specification of some
exercises may alternatively request you to rely on GNU Build System, a.k.a
Autotools.  It this requirement is part of the exercise, you shall not
write a custom Makefile. Rather, you shall provide the needed Makefile.am
scripts and rely on Autotools utilities to generate the Makefiles. The
build scripts produced by Autoconf and Automake already implement all
the required build and install rules.  In this case, the user is expected
to execute

   $ cd myproject
   $ ./configure --prefix=/tmp/foo
   $ make
   $ make install


CAVEATS
-------

You should not copy files from POSIXeg's runcmd source code; rather, you
are entitled to create your own implementation. You may, however, link your
source code agains libposixeg if you ever find it useful.

Your implementation must use **exclusively** the standard C library (aka libc)
and no other external library. This is part of the exercise.

The evaluation of the exercise will be performed by compiling your code with


   gcc -Wall -Werror --ansi --pedantic-errors -D_POSIX_C_SOURCE=200809L

and it is expected that it is built without errors or warnings. Therefore,
make sure your implementation is adherent to ISO/ANSI/Standard C (c89/90)
and POSIX (IEEE 1003.1-2008). 

COPYRIGHT
----------

Since you are going to make your project public, you should observe  
applicable authors right laws and ethical practice. Although many programmers 
are either unaware or negligent about this matter, there are legal issues that 
you should take care of, as you may unadvertently be liable to copyright 
infringement or ideological falsehood.

The source files you have authored yourself should be attributed to yourself. 
To that end, every source file should have a copyright claim and licensing 
information at the beginning of the text. For instance, if you are releasing 
your software under GPL, a suggestion might be

    Copyright (c) <year> <Your Name> 

    This file is part of Foo.

    Foo is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Foo is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Foo.  If not, see <http://www.gnu.org/licenses/>.

It is important that you put this note at the beginning of every source file.

The source files that you have borrowed from open source projects "as is" should
retain their original  copyright information. It would be a copyright 
infringement to remove the copyright claim and an ideological falsehood to 
assume authorship of someone else's work.  

The source files that you have obtained from other open source projects and have
modified yourself are derivative works, and as such should be properly 
attributed. To that end you should retain information about the original author
and add your own copyright claim. One possible way to make an attribution of a
derivative work might be

    Foo, Copyright (c) <Your Name> <year> 
    Foo is derived from Bar, Copyright (c) <Name of other Author> <year>

    This file is part of Foo.

    Foo is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Foo is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Foo.  If not, see <http://www.gnu.org/licenses/>.

As the program author and copyright holder, you may choose whatever license
you prefer. Bear in mind, however, that your license must be compatible with
the licenses of the other software your project makes use of. For instance,
if your project is a derivative work of a software covered by GNU GPL, you
may not use a proprietary license for your code.  Related issues apply if
you link your software against GPL-license libraries. Going through the
intricacy of licensing legal issues is not trivial. If in doubt, you may
safely use GNU GPL v3 for the software that interacts with POSIXeg.


REPOSITORY MANAGEMENT
--------------------------------------------------

Keep your repository clean and healthy.

* Do not upload generated files to the main repository. These include
object code (*.o) binaries, libraries (*.a, *.so) and temporary files. As a rule
of thumb, if 'make' has produced the files, do not upload it; only sources 
should go to the repository.

* If the exercise's instructions specify what files should go into your project
directory and what files should not be included, follow the directions strictly.
Not complying to this recommendation may result in failure of automated testing
tools.


GENERAL RECOMMENDATIONS
--------------------------------------------------

Recommendations in this section are not meant as strict rules but offer useful
guidelines to keep your project well structured and easy to manage.

* You may manage your VCS repository in the usual way. Notice, however the 
following suggestions.

Try not to commit broken implementation to the master branch of the main 
repository. This includes buggy code or code that does not compile, as it may
cause troubles to your development teammates.  Instead, if you want to share 
some incomplete code, do it in a separate branch. You may create a new branch
by following these steps


  $ git branch branch_name                             create a new branch
  $ git checkout branch_name                           move to the new branch

  do your editing

  $ git add <Changed files>                            add modified files
  $ git commit -m "Some meaningful message"            commit modification
  $ git push origin branch_name                        upload the branch

To checkout a specific branch from the repository

  $ git fetch branch_name                              fetch the remote branch
  $ git checkout branch_name                           move to the new branch

You may use this mechanism to share code for discussions with teammates and
others. Please, refer to Git documentation for further details.

As a suggestion, before starting to work in a new issue, you may go through
the following workflow

  $ git pull                              make sure you have the newest changes
  $ git checkout -b some_tag              create a new local branch ane checkout it

  do your editings

  $ git add <modified files>              mark the files to be committed
  $ git commit -m "A meaningful message"  commit your changes to local branch
  $ git checkout master                   move to the master branch
  $ git merge some_tag                    apply your changes
  $ git push                              upload your changes

This may save you time if you later want to move back to the master branch
before committing your changes (or to get rid of bad ideas without compromising
your master branch).

* If possible, you are strongly encouraged to code in English. This has the 
advantage of broadening the visibility of your project and enhancing its 
potential to bring in collaborators. While many non-native speakers may be 
reticent in this respect due to lack of fluency, actually most developers around 
the world will prize your courage and good will rathar than complain about your 
average skills. Have you ever downloaded a cool piece of software which you 
would like to study and perhaps use, but came across variable names, function
names and comments in some language completely unkown to you, say Klingon or 
the like?  If not possible, well this should prevent you from coding at all.

POSIXeg CHANGES AND UPDATES
--------------------------------------------------

Eventual changes in POSIXeg such as bug fixes and other improvements may affect
the test programs against which your libruncmd implementation will be evaluated.

Therefore, your are urged to keep an eye on POSIXeg updates during the whole
course of development of your exercise by monitoring the POSIXeg repository at

    https://gitlab.com/monaco/posixeg

You are also strongly encouraged to report bugs and suggest improvements by 
emailing the author.



